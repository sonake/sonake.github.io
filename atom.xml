<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sonake</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="sonake.github.io/"/>
  <updated>2021-10-26T01:54:52.364Z</updated>
  <id>sonake.github.io/</id>
  
  <author>
    <name>sonake</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构与算法(三)</title>
    <link href="sonake.github.io/2021/10/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E4%B8%89/"/>
    <id>sonake.github.io/2021/10/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E4%B8%89/</id>
    <published>2021-10-25T21:04:22.000Z</published>
    <updated>2021-10-26T01:54:52.364Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要说一下多项式和简单的循环问题,留言区留下你们的答案</p><a id="more"></a><h2 id="上问题"><a href="#上问题" class="headerlink" title="上问题"></a>上问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 循环输出范围内的数字，这可能是最容易想到的方式，有没有其他办法呢，大家可以评论留言</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;i&lt;<span class="number">10</span>;i++)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* f(x)=an·x^n+an-1·x^(n-1)+…+a2·x^2+a1·x+a0   多项式如何用代码实现呢</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">double</span>  <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">double</span>[] a, <span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里主要说一下多项式和简单的循环问题,留言区留下你们的答案&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="sonake.github.io/tags/java/"/>
    
      <category term="数据结构" scheme="sonake.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq简单实践</title>
    <link href="sonake.github.io/2019/12/27/rabbitmq%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/"/>
    <id>sonake.github.io/2019/12/27/rabbitmq%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</id>
    <published>2019-12-27T14:39:54.000Z</published>
    <updated>2021-10-26T01:54:52.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p><a id="more"></a><p>消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<br>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。<br>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，<br>如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。<br>用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p><p>个人想到最常用的高并发场景可能是秒杀，这里自己做了一个简单的demo，进行了实践。</p><h3 id="项目地址-rabbitmq秒杀实践"><a href="#项目地址-rabbitmq秒杀实践" class="headerlink" title="项目地址: rabbitmq秒杀实践"></a>项目地址: <a href="https://github.com/sonake/seconds-kill-demo" target="_blank" rel="noopener">rabbitmq秒杀实践</a></h3><h3 id="第一步-新建springboot项目，引入依赖-增加库表"><a href="#第一步-新建springboot项目，引入依赖-增加库表" class="headerlink" title="第一步: 新建springboot项目，引入依赖,增加库表"></a>第一步: 新建springboot项目，引入依赖,增加库表</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--消息队列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里springboot的版本为2.2.0，持久层选择mybatis-plus,消息队列配合redis实现高并发场景下的削峰，主要是redis有优秀的读写速度，可以快速处理请求，将请求结果处理后，返回用户，通过消息队列暂存结果，监听队列，程序持久化结果到数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Navicat MariaDB Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Source Server         : localhost</span></span><br><span class="line"><span class="comment">Source Server Version : 100214</span></span><br><span class="line"><span class="comment">Source Host           : localhost:3308</span></span><br><span class="line"><span class="comment">Source Database       : seconds_kill</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Target Server Type    : MariaDB</span></span><br><span class="line"><span class="comment">Target Server Version : 100214</span></span><br><span class="line"><span class="comment">File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Date: 2019-12-26 18:30:26</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for goods</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`goods`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`goods`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`goods_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品名称'</span>,</span><br><span class="line">  <span class="string">`store`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'价格'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of goods</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`goods`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'watch'</span>, <span class="string">'150'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`goods`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'pencil'</span>, <span class="string">'150'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for orders</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`orders`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`orders`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`order_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`order_user`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">36956</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><p>orders订单表id，考虑到实际业务，订单id必须唯一，使用mybatis-plus的分布式全局唯一id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonake.seconds.kill.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：xzyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2019/12/26 13:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"orders"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.ID_WORKER_STR)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line">    <span class="keyword">private</span> String orderUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二步：添加配置"><a href="#第二步：添加配置" class="headerlink" title="第二步：添加配置"></a>第二步：添加配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seconds_kill</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3308/seconds_kill?rewriteBatchedStatements=true&amp;serverTimezone=GMT%2b8</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">30000</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">1800000</span></span><br><span class="line">      <span class="attr">max-pool-size:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">200</span></span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">10</span> <span class="comment">#最大重试次数</span></span><br><span class="line">          <span class="attr">max-interval:</span> <span class="number">10000</span> <span class="comment">#重试最大时间间隔(ms)</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="comment">#c重试间隔时间(ms)</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">5</span> <span class="comment">#应用于前一重试间隔的乘法器。</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">1024</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">200</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="第三步：代码实现"><a href="#第三步：代码实现" class="headerlink" title="第三步：代码实现"></a>第三步：代码实现</h3><p>这里主要说一下与消息队列主要的代码，数据库常用的crud不做展示，具体可看项目demo</p><ol><li>rabbitmq的配置,有关rabbitmq的参数可以自行百度，<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonake.seconds.kill.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.MessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：xzyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2019/12/26 14:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//库存交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STORY_EXCHANGE = <span class="string">"STORY_EXCHANGE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ORDER_EXCHANGE = <span class="string">"ORDER_EXCHANGE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//库存队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STORY_QUEUE = <span class="string">"STORY_QUEUE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ORDER_QUEUE = <span class="string">"ORDER_QUEUE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//库存路由键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STORY_ROUTING_KEY = <span class="string">"STORY_ROUTING_KEY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单路由键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ORDER_ROUTING_KEY = <span class="string">"ORDER_ROUTING_KEY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建库存交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">getStoryExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(STORY_EXCHANGE).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建库存队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">getStoryQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(STORY_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//库存交换机和库存队列绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindStory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(getStoryQueue()).to(getStoryExchange()).with(STORY_ROUTING_KEY).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建订单队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">getOrderQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(ORDER_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建订单交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">getOrderExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(ORDER_EXCHANGE).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单队列与订单交换机进行绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(getOrderQueue()).to(getOrderExchange()).with(ORDER_ROUTING_KEY).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>库存初始化至redis</p><blockquote><blockquote><blockquote><p>在开发中可能会有这样的情景。需要在容器启动的时候执行一些内容。比如读取配置文件，数据库连接之类的。<br>SpringBoot给我们提供了两个接口来帮助我们实现这种需求。这两个接口分别为CommandLineRunner和ApplicationRunner。<br>他们的执行时机为容器启动完成的时候。这里选用ApplicationRunner。</p></blockquote></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonake.seconds.kill.demo.runner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.domain.Goods;</span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.service.GoodsService;</span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.service.RedisService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：xzyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2019/12/26 11:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：项目启动数据初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationStartupRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Goods&gt; list = goodsService.list();</span><br><span class="line">        list.forEach(goods -&gt; &#123;</span><br><span class="line">            redisService.put(goods.getGoodsName(),goods.getStore(),<span class="number">20</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        log.info(<span class="string">"商品库存初始化至redis完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图： </p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="redis持久化.png" alt="redis持久化.png" title="">                </div>                <div class="image-caption">redis持久化.png</div>            </figure><ol start="2"><li>秒杀请求发起</li></ol><p>在这里主要写了两个请求，主要作用见注释.<br>在使用redis+rebbitmq实现秒杀这个接口里，并没有针对数据库的操作，是针对redis做了数据增减，然后将下单结果告知rabbitmq并实现了暂存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonake.seconds.kill.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.domain.Orders;</span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.service.GoodsService;</span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.service.RedisService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：xzyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2019/12/26 14:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用redis+消息队列进行秒杀实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sec"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sec</span><span class="params">(@RequestParam(value = <span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"goodsName"</span>)</span> String goodsName) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"参加秒杀的用户是：&#123;&#125;，秒杀的商品是：&#123;&#125;"</span>, username, goodsName);</span><br><span class="line">        String message = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//调用redis给相应商品库存量减一</span></span><br><span class="line">        Long decrByResult = redisService.decrBy(goodsName);</span><br><span class="line">        <span class="keyword">if</span> (decrByResult &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 说明该商品的库存量有剩余，可以进行下订单操作</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            log.info(<span class="string">"用户：&#123;&#125;秒杀该商品：剩余&#123;&#125;库存，可以进行下订单操作"</span>, username, decrByResult, goodsName);</span><br><span class="line">            <span class="comment">//发消息给库存消息队列，将库存数据减一</span></span><br><span class="line">            rabbitTemplate.convertAndSend(RabbitMQConfig.STORY_EXCHANGE, RabbitMQConfig.STORY_ROUTING_KEY, goodsName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发消息给订单消息队列，创建订单</span></span><br><span class="line">            Orders orders = <span class="keyword">new</span> Orders();</span><br><span class="line">            orders.setOrderName(goodsName);</span><br><span class="line">            orders.setOrderUser(username);</span><br><span class="line">            rabbitTemplate.convertAndSend(RabbitMQConfig.ORDER_EXCHANGE, RabbitMQConfig.ORDER_ROUTING_KEY, orders);</span><br><span class="line">            message = <span class="string">"用户"</span> + username + <span class="string">"秒杀"</span> + goodsName + <span class="string">"成功"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 说明该商品的库存量没有剩余，直接返回秒杀失败的消息给用户</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            log.info(<span class="string">"用户：&#123;&#125;秒杀时商品的库存量没有剩余,秒杀结束"</span>, username);</span><br><span class="line">            message = username + <span class="string">"商品的库存量没有剩余,秒杀结束"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现纯数据库操作实现秒杀操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/secDataBase"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">secDataBase</span><span class="params">(@RequestParam(value = <span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"goodsName"</span>)</span> String goodsName) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"参加秒杀的用户是：&#123;&#125;，秒杀的商品是：&#123;&#125;"</span>, username, goodsName);</span><br><span class="line">        <span class="keyword">return</span> goodsService.secData(username,goodsName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>消息队列的监听并消费<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonake.seconds.kill.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.domain.Orders;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：xzyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2019/12/26 14:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：订单监听</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQOrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听订单消息队列，并消费</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = RabbitMQConfig.ORDER_QUEUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOrder</span><span class="params">(Orders orders)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"收到订单消息，订单用户为：&#123;&#125;，商品名称为：&#123;&#125;"</span>, orders.getOrderUser(), orders.getOrderName());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用数据库orderService创建订单信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//int s =Integer.valueOf("ssss");</span></span><br><span class="line">        orderService.save(orders);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonake.seconds.kill.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sonake.seconds.kill.demo.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：xzyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2019/12/26 14:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQStoreService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听库存消息队列，并消费</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = RabbitMQConfig.STORY_QUEUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrByStock</span><span class="params">(String goodsName)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"库存消息队列收到的消息商品信息是：&#123;&#125;"</span>, goodsName);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用数据库service给数据库对应商品库存减一</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//int s =Integer.valueOf("ssss");</span></span><br><span class="line">        goodsService.decrByStore(goodsName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="利用压测工具jmeter模拟秒杀"><a href="#利用压测工具jmeter模拟秒杀" class="headerlink" title="利用压测工具jmeter模拟秒杀."></a>利用压测工具jmeter模拟秒杀.</h3><p><a href="https://www.apache.org/dist/jmeter/binaries/" target="_blank" rel="noopener">点我下载</a>,注意与jdk的版本对应关系</p><p>模拟300个用户秒杀</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jmeter截图1.png" alt="jmeter截图1.png" title="">                </div>                <div class="image-caption">jmeter截图1.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jmeter截图2.png" alt="jmeter截图2.png" title="">                </div>                <div class="image-caption">jmeter截图2.png</div>            </figure><p>点击请求，发起秒杀<br>用户收到的秒杀结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jmeter3.png" alt="jmeter3.png" title="">                </div>                <div class="image-caption">jmeter3.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jmeter4.png" alt="jmeter4.png" title="">                </div>                <div class="image-caption">jmeter4.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="jmeter5.png" alt="jmeter5.png" title="">                </div>                <div class="image-caption">jmeter5.png</div>            </figure><p>可以看到：有的用户秒杀成功，有的失败，因为初始化的商品库存共计200件，这里模拟300用户下单，故有100用户秒杀失败<br>消息队列接收到的数据</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="rabbitmq1.png" alt="rabbitmq1.png" title="">                </div>                <div class="image-caption">rabbitmq1.png</div>            </figure><p>客户端监听消息队列并进行消费</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="rabbitmq2.png" alt="rabbitmq2.png" title="">                </div>                <div class="image-caption">rabbitmq2.png</div>            </figure><h3 id="纯数据库秒杀"><a href="#纯数据库秒杀" class="headerlink" title="纯数据库秒杀"></a>纯数据库秒杀</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="数据库秒杀1.png" alt="数据库秒杀1.png" title="">                </div>                <div class="image-caption">数据库秒杀1.png</div>            </figure><p>可以发现，由于并发的操作，导致多个请求进来的时候读取的商品库存量都是一样的</p><p>数据库结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="数据库秒杀2.png" alt="数据库秒杀2.png" title="">                </div>                <div class="image-caption">数据库秒杀2.png</div>            </figure><p>我设置了20用户秒杀，下单都成功了，但是数据库库存只少了6个.<br>可以看出，由于并发的情况，导致订单超卖，所有用户都已经下单成功了，并且数据库中的库存也并未归零（随着并发量的增多，数据库中的库存会为0 ，但是会有更多的用户下单成功，也会有用户下单失败，秒杀结束</p><p>至此，这里使用了redis+rabbitmq实现了高并发秒杀场景，并有效的防止了超卖现象，同时听过使用纯数据库操作产生了超卖的现象。</p><blockquote><blockquote><p>另外，由于考虑实际场景，rabbitmq万一挂掉我们的消息也就丢失了，为了防止此类情况，可设置消息队列的持久化或者集群，有效避免此类情况，这里没有做展示，感兴趣的可自行百度。<br>配置文件中rabbitmq有关重试的设置,在设置了重试次数以后，若还是没有尝试成功，消息就会被丢弃，客户端也无法获取消息，默认是一直尝试的，此处可设置手动ack的确认，处理异常，<br>并进行相关的的消息补偿等，详情百度。</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="redis" scheme="sonake.github.io/tags/redis/"/>
    
      <category term="rabbitmq" scheme="sonake.github.io/tags/rabbitmq/"/>
    
      <category term="秒杀" scheme="sonake.github.io/tags/%E7%A7%92%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>netty学习笔记(一)</title>
    <link href="sonake.github.io/2019/12/17/netty%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>sonake.github.io/2019/12/17/netty%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2019-12-17T22:23:33.000Z</published>
    <updated>2021-10-26T01:54:52.360Z</updated>
    
    <content type="html"><![CDATA[<p>初始netty<br>Netty是一个提供了易于使用的API的客户端/服务端框架<br>并发高-NIO(非阻塞IO)<br>传输快-零拷贝</p><a id="more"></a><h3 id="Netty提供了三种线程模型-Reactor线程模型-简单说一下各自的实现"><a href="#Netty提供了三种线程模型-Reactor线程模型-简单说一下各自的实现" class="headerlink" title="Netty提供了三种线程模型(Reactor线程模型),简单说一下各自的实现"></a>Netty提供了三种线程模型(Reactor线程模型),简单说一下各自的实现</h3><h5 id="1-单线程模型"><a href="#1-单线程模型" class="headerlink" title="1. 单线程模型"></a>1. 单线程模型</h5><p>所有的IO操作都由一个NIO线程处理,局限于一些小场景，高负载多并发不适用</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="netty单线程模型.png" alt="netty单线程模型.png" title="">                </div>                <div class="image-caption">netty单线程模型.png</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonake.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：xzyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2019/12/18 10:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：netty单线程模型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap()</span><br><span class="line">                .group(group)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> HelloServerInitializer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-多线程模型"><a href="#2-多线程模型" class="headerlink" title="2. 多线程模型"></a>2. 多线程模型</h5><p>由一个线程监听服务端，接收客户端的连接请求<br>由一组NIO线程处理IO操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonake.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：xzyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2019/12/18 10:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：netty多线程模型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup boss = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup work = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap()</span><br><span class="line">                .group(boss,work)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> HelloServerInitializer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="netty多线程模型.png" alt="netty多线程模型.png" title="">                </div>                <div class="image-caption">netty多线程模型.png</div>            </figure><p>多线程模型在绝大多数场景已经可以满足业务需要，但是在一些特殊场景性能还是有局限，例如百万千万级别的并发，多线程模型处理起来就有点无力</p><h5 id="3-主从线程模型"><a href="#3-主从线程模型" class="headerlink" title="3. 主从线程模型"></a>3. 主从线程模型</h5><p>一组线程池接收客户端请求，一组线程池处理IO操作</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="netty主从线程模型.png" alt="netty主从线程模型.png" title="">                </div>                <div class="image-caption">netty主从线程模型.png</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sonake.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：xzyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2019/11/28 17:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：hello服务端，客户端发送一个请求，服务端会返回hello netty</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//定义一对线程组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程组，用于接收客户端的链接，不做任何其他处理</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="comment">//从线程组，主线程组会把任务丢给从线程组，让从线程组执行任务</span></span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//netty服务器创建，serverBootstrap启动类</span></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap</span><br><span class="line">                    .group(bossGroup,workerGroup)  <span class="comment">//设置主从线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)   //设置通道</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">HelloServerInitializer</span>())</span>; <span class="comment">//子处理器，用于处理workerGroup</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动server，并设置端口为8088，同步启动</span></span><br><span class="line">            ChannelFuture channelFuture =  serverBootstrap.bind(<span class="number">8088</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//监听需要关闭的channel，设置为同步</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初始netty&lt;br&gt;Netty是一个提供了易于使用的API的客户端/服务端框架&lt;br&gt;并发高-NIO(非阻塞IO)&lt;br&gt;传输快-零拷贝&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="IO" scheme="sonake.github.io/tags/IO/"/>
    
      <category term="netty" scheme="sonake.github.io/tags/netty/"/>
    
      <category term="SpringBoot" scheme="sonake.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel+Nacos实现规则持久化</title>
    <link href="sonake.github.io/2019/12/16/Sentinel-Nacos%E5%AE%9E%E7%8E%B0%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>sonake.github.io/2019/12/16/Sentinel-Nacos%E5%AE%9E%E7%8E%B0%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2019-12-16T11:36:22.000Z</published>
    <updated>2021-10-26T01:54:52.356Z</updated>
    
    <content type="html"><![CDATA[<p>和大家聊一聊alibaba开源很好用的流控组件Sentinel</p><a id="more"></a><p>Sentinel是面向分布式服务框架的轻量级流量控制框架,主要以流量为切入点,从流量控制,熔断降级,系统负载保护等多个维度来维护系统的稳定性。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. 2012年，Sentinel诞生于阿里巴巴，其主要目标是流量控制。</span><br><span class="line">. 2013-2017年，Sentinel增长迅速，并成为阿里巴巴所有微服务的基本组成部分。它已在6000多个应用程序中使用，几乎涵盖了所有核心电子商务场景。</span><br><span class="line">. 2018年，Sentinel演变为一个开源项目。</span><br></pre></td></tr></table></figure><p>Sentinel对于资源的控制主要通过流量(QPS)和并发线程数做控制。<br>更多的了解可点击<a href="https://github.com/alibaba/Sentinel/wiki" target="_blank" rel="noopener">Sentinel使用指南</a></p><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>下面说说具体怎么利用Nacos实现规则的持久化</p><h3 id="先声明一下各个组件的版本"><a href="#先声明一下各个组件的版本" class="headerlink" title="先声明一下各个组件的版本"></a>先声明一下各个组件的版本</h3><table><thead><tr><th>组件</th><th align="center">版本信息</th></tr></thead><tbody><tr><td>SpringBoot</td><td align="center">2.2.0</td></tr><tr><td>SpringCloud</td><td align="center">Hoxton.RELEASE</td></tr><tr><td>Nacos</td><td align="center"><a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">1.1.4</a></td></tr><tr><td>JDK</td><td align="center"><a href="https://docs.aws.amazon.com/zh_cn/corretto/latest/corretto-8-ug/downloads-list.html" target="_blank" rel="noopener">1.8.0_232</a></td></tr></tbody></table><blockquote><blockquote><p>提一句,这里声明jdk的版本原因是:如果版本偏低,在集成sentinel的nacos配置时，读取不到参数的问题,大致版本高于1.8.0_5这个应该就可以，具体没有测试具体哪一个版本出现了偏差</p></blockquote></blockquote><h3 id="第一步-Sentinel客户端配置"><a href="#第一步-Sentinel客户端配置" class="headerlink" title="第一步:Sentinel客户端配置"></a>第一步:Sentinel客户端配置</h3><ol><li>添加依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>添加配置<br>新建一个SpringBoot项目，配置文件添加如下配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8868</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sentinel-demo</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#Sentinel控制台的地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8192</span></span><br><span class="line">        <span class="comment">#Sentinel的默认端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">      <span class="comment">#开启懒加载</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ns:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">serverAddr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9010</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">$&#123;spring.application.name&#125;-flow-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">SENTINEL_GROUP</span></span><br><span class="line">            <span class="attr">rule_type:</span> <span class="string">flow</span></span><br><span class="line">            <span class="attr">dataType:</span> <span class="string">json</span></span><br></pre></td></tr></table></figure></li><li>启动下载好的nacos服务<br>找到/nacos/conf下面的nacos-mysql.sql文件,在mysql导入运行，建立nacos对应的库表结构<br>再该目录下打开application.properties文件，修改如下<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="nacos数据库信息.png" alt="nacos数据库信息.png" title="">                </div>                <div class="image-caption">nacos数据库信息.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="修改nacos端口.png" alt="修改nacos端口.png" title="">                </div>                <div class="image-caption">修改nacos端口.png</div>            </figure><blockquote><p>! 主要是修改了nacos服务的启动端口已经配置nacos的数据库信息</p></blockquote></li></ol><p>然后在/nacos/bin下面，因为是windows系统，单机startup.cmd启动服务即可,登录名和密码均为nacos</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="nacos界面截图.png" alt="nacos界面截图.png" title="">                </div>                <div class="image-caption">nacos界面截图.png</div>            </figure><h3 id="第二步-Sentinel控制台改造"><a href="#第二步-Sentinel控制台改造" class="headerlink" title="第二步:Sentinel控制台改造"></a>第二步:Sentinel控制台改造</h3><p>因为Sentinel的源码提供的流控规则生效是在内存中发生的，所以当我们重启应用时，配置好的规则就会丢失，而在生产环境中，<br>需要进行规则配置持久化，但Sentinel-dashboard源码是不具备持久化的功能，我们需要将其进行改造,采用Push架构模式<br><a href="https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel" target="_blank" rel="noopener">更多介绍点击</a></p><ol><li><p>下载Sentinel-dashboard源码<br><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">点击下载</a><br>选择sentinel-dashboard作为我们改造的源代码</p></li><li><p>改造源代码<br>① 在src\main\java\com\alibaba\csp\sentinel\dashboard\controller\v2下面找到FlowControllerV2.java<br>修改前<br><img src="FlowControllerV2%E4%BF%AE%E6%94%B9%E5%89%8D.png" alt="FlowControllerV2修改前.png"><br>修改后<br><img src="FlowControllerV2%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="FlowControllerV2修改后.png"></p><p>② 在src\test\java\com\alibaba\csp\sentinel\dashboard\rule\目录下，将nacos复制到src\main\java\com\alibaba\csp\sentinel\dashboard\rule下<br>如图:<br><img src="nacos%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%A4%8D%E5%88%B6.jpg" alt="nacos相关配置类复制.jpg"></p><p>③ 找到配置文件application.properties文件<br>增加nacos的配置地址：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置nacos服务的地址   </span></span><br><span class="line"><span class="meta">nacos.url</span>=<span class="string">127.0.0.1:9010 </span></span><br><span class="line"><span class="comment">#在这里我修改了服务的端口为8192，对应第一步中配置文件的dashboard参数</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8192</span></span><br></pre></td></tr></table></figure></li></ol><p>   在src\main\java\com\alibaba\csp\sentinel\dashboard\rule\nacos\NacosConfig.java中修改如图<br>   修改前：<br>   <img src="NacosConfig%E4%BF%AE%E6%94%B9%E5%89%8D.png" alt="NacosConfig修改前.png"><br>   修改后：<br>   <img src="NacosConfig%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="NacosConfig修改后.png"><br>   ④ 找到src\main\webapp\resources\app\scripts\directives\sidebar\下的sidebar.html该文件，修改如图<br>   修改前：<br>   <img src="siderhtml%E4%BF%AE%E6%94%B9%E5%89%8D.png" alt="siderhtml修改前.png"><br>   修改后：<br>   <img src="siderhtml%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="siderhtml修改后.png"><br>   我将原来的缓存规则配置做了保留，新加了持久化配置的菜单<br>   ⑤ 找打src\main\webapp\resources\app\scripts\controllers\下的identity.js该文件，修改如图<br>   <img src="identity%E4%BF%AE%E6%94%B9.png" alt="identity修改.png"><br>   然后可以直接在本地运行这个SpringBoot项目，或者进行打包后后运行，顺带启动客户端服务，Sentinel控制台用户名和密码均<br>   为sentinel，启动后界面如下：<br>   <img src="Sentinel%E7%95%8C%E9%9D%A2.png" alt="Sentinel界面.png"></p><h3 id="第三步：测试效果"><a href="#第三步：测试效果" class="headerlink" title="第三步：测试效果"></a>第三步：测试效果</h3><ol><li>客户端启动后，Sentinel控制台就会出现该该客户端的资源<br><img src="%E7%95%8C%E9%9D%A21.png" alt="界面1.png"><br>   先在客户端编写一个接口返回信息用于测试限流，然后重启客户端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sentineldemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：xzyuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2019/12/13 10:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"sen"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sentinel"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 随便点击几下，控制台就可监控到服务端的流量情况<br> <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="界面2.png" alt="界面2.png" title="">                </div>                <div class="image-caption">界面2.png</div>            </figure></p><ol start="2"><li>我们先通过缓存配置规则来限制流量<br>如图：</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="缓存规则1.png" alt="缓存规则1.png" title="">                </div>                <div class="image-caption">缓存规则1.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="缓存规则2.png" alt="缓存规则2.png" title="">                </div>                <div class="image-caption">缓存规则2.png</div>            </figure><p>由于我们是手动点击，受手速及网络影响，请求的频率有限，所以选择阈值为1，使用postman进行测试<br>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="缓存规则3.png" alt="缓存规则3.png" title="">                </div>                <div class="image-caption">缓存规则3.png</div>            </figure><p>当我们频繁点击请求接口，超过阈值时，就会被告知访问频率过高的提示。限流成功。<br>重启服务或者控制台。再次点击请求，限流失效，控制台缓存流控规则也没有信息，符合我们上面所说。只是发生在内存中的规则。</p><ol start="3"><li>通过持久化配置规则来限制流量<br>如图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="持久化规则1.png" alt="持久化规则1.png" title="">                </div>                <div class="image-caption">持久化规则1.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="持久化规则2.png" alt="持久化规则2.png" title="">                </div>                <div class="image-caption">持久化规则2.png</div>            </figure></li></ol><p>通过NACOS的流控规则和簇点链路都是可以进行流控规则的新增，点击新增，完成对流控规则的持久化配置<br>查看nacos的配置列表和数据库信息:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="持久化规则3.png" alt="持久化规则3.png" title="">                </div>                <div class="image-caption">持久化规则3.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="持久化规则4.png" alt="持久化规则4.png" title="">                </div>                <div class="image-caption">持久化规则4.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="持久化规则5.png" alt="持久化规则5.png" title="">                </div>                <div class="image-caption">持久化规则5.png</div>            </figure><p>使用postman频繁点击请求接口：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="缓存规则3.png" alt="缓存规则3.png" title="">                </div>                <div class="image-caption">缓存规则3.png</div>            </figure><p>使用了nacos配置持久化，控制台是否开启对我们来说无所谓，需要补充规则配置时开启，进行规则的补充就可以，也可以直接在<br>nacos上面新增配置文件，格数据式参照我们在控制台新增的配置即可<br>关闭客户端，nacos，控制台程序，在此启动客户端和nacos<br>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="缓存规则3.png" alt="缓存规则3.png" title="">                </div>                <div class="image-caption">缓存规则3.png</div>            </figure><p>证明我们流控规则的持久化起作用了！</p><blockquote><blockquote><blockquote><p>Sentinel-dashboard我进行了源码改造适用于nacos的持久化规则配置，改造后的<a href="https://github.com/sonake/sentinel-dashboard-rebulid" target="_blank" rel="noopener">代码地址</a>,SpringCloud集成该配置也是差不多的。<br>流控规则的持久化还有并发线程的限制，这里没有做过多演示。此外，Sentinel还提供了降级、授权，集群等很多功能，这里只对流量控制做了改<br>造的示例，在生产环境使用Sentinel有三种模式，这里对Push模式做了改造，Sentinel还提供了apollo、Zookeeper等的第三方支持，大家可以<br>自己研究下，大致都是类似的，<a href="https://github.com/alibaba/Sentinel/wiki" target="_blank" rel="noopener">详细文档</a></p></blockquote></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和大家聊一聊alibaba开源很好用的流控组件Sentinel&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SpringCloud" scheme="sonake.github.io/tags/SpringCloud/"/>
    
      <category term="java" scheme="sonake.github.io/tags/java/"/>
    
      <category term="Gateway" scheme="sonake.github.io/tags/Gateway/"/>
    
      <category term="alibaba" scheme="sonake.github.io/tags/alibaba/"/>
    
      <category term="sentinel" scheme="sonake.github.io/tags/sentinel/"/>
    
      <category term="nacos" scheme="sonake.github.io/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>数据结构中的树</title>
    <link href="sonake.github.io/2019/11/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%AD%E7%9A%84%E6%A0%91/"/>
    <id>sonake.github.io/2019/11/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%AD%E7%9A%84%E6%A0%91/</id>
    <published>2019-11-26T14:20:50.000Z</published>
    <updated>2021-10-26T01:54:52.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>树Tree</strong>是n(n&gt;=0)个结点的有限集。n=0时称为空树。在任意一颗非空树中：<br>1）有且仅有一个特定的称为根（Root）的结点；<br>2）当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集T1、T2、……、Tn，其中每一个集合本身又是一棵树，并且称为根的子树。</p><a id="more"></a><p>此外，树的定义还需要强调以下两点：<br>1）n&gt;0时根结点是唯一的，不可能存在多个根结点，数据结构中的树只能有一个根结点。<br>2）m&gt;0时，子树的个数没有限制，但它们一定是互不相交的。</p><p>如图1,普通的树结构：</p><center><img src="./普通树结构.png"/></br><u>图1</u></center><h2 id="节点的度"><a href="#节点的度" class="headerlink" title="节点的度"></a>节点的度</h2><p>节点拥有的子树数目称为节点的度。<br>例如图2所示：</p><center><img src="./度示意图.png"/></br><u>图2</u></center><h2 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h2><p>结点子树的根结点为该结点的孩子结点。相应该结点称为孩子结点的双亲结点。<br>图中，A为B的双亲结点，B为A的孩子结点。<br>同一个双亲结点的孩子结点之间互称兄弟结点。<br>图中，结点B与结点C互为兄弟结点。</p><h2 id="结点层次"><a href="#结点层次" class="headerlink" title="结点层次"></a>结点层次</h2><p>从根开始定义起，根为第一层，根的孩子为第二层，以此类推。<br>如图3所示：</p><center><img src="./层示意图.png"/></br><u>图3</u></center><h2 id="树的深度"><a href="#树的深度" class="headerlink" title="树的深度"></a>树的深度</h2><p>树中结点的最大层次数称为树的深度或高度，图中树的深度为4。</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p><strong>二叉树</strong>是n(n&gt;=0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、<br>分别称为根结点的左子树和右子树组成。<br>如图4所示: </p><center><img src="./普通二叉树.png"/></br><u>图4</u></center><h2 id="二叉树特点"><a href="#二叉树特点" class="headerlink" title="二叉树特点"></a>二叉树特点</h2><p>由二叉树定义以及图示分析得出二叉树有以下特点：<br>1）每个结点最多有两个子树，所以二叉树中不存在度大于2的结点。<br>2）左子树和右子树是有顺序的，次序不能颠倒。</p><h2 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h2><p>1）在二叉树的第i层上最多有2i-1 个节点 。（i&gt;=1）<br>2）二叉树中如果深度为k,那么最多有2k-1个节点。(k&gt;=1）<br>3）n0=n2+1 n0表示度数为0的节点数，n2表示度数为2的节点数。<br>4）在完全二叉树中，具有n个节点的完全二叉树的深度为[log2n]+1，其中[log2n]是向下取整。<br>5）若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点有如下特性：</p><pre><code>(1) 若 i=1，则该结点是二叉树的根，无双亲, 否则，编号为 [i/2] 的结点为其双亲结点;(2) 若 2i&gt;n，则该结点无左孩子， 否则，编号为 2i 的结点为其左孩子结点；(3) 若 2i+1&gt;n，则该结点无右孩子结点， 否则，编号为2i+1 的结点为其右孩子结点。</code></pre><h2 id="斜树"><a href="#斜树" class="headerlink" title="斜树"></a>斜树</h2><p>斜树：所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树。<br>如图5左斜树、图6右斜树</p><center><img src="./左斜树.png"/></br><u>图5左斜树</u></center><center><img src="./右斜树.png"/></br><u>图6右斜树</u></center><h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2><p>满二叉树：在一棵二叉树中。如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，<br>这样的二叉树称为满二叉树。</p><center><img src="./满二叉树.png"/></br><u>图7满二叉树</u></center><p><em>满二叉树的特点有</em>:</p><p>  1) 叶子只能出现在最后一层。<br>  2) 非叶子结点的度一定是2。<br>  3) 在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</p><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><p>对一颗具有n个结点的二叉树按层编号，如果编号为i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中<br>编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。</p><center><img src="./完全二叉树.png"/></br><u>图8完全二叉树</u></center><p><em>完全二叉树的特点</em>：</p><p>1) 叶子结点只能出现在最下层和倒数第二层。<br>2) 最后一层的叶子结点集中在树的左部且连续。<br>3) 倒数第二层若存在叶子结点，一定在右树且连续。<br>4) 如果结点度为1，则该结点只有左孩子，即没有右子树。<br>5) 同样结点数目的二叉树，完全二叉树深度最小。<br>注：满二叉树一定是完全二叉树，但反过来不一定成立。</p><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><center><img src="./普通二叉树.png"/></br><u>图9</u></center>我们针对图9进行相关的遍历<h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><ol><li>从根结点开始访问；</li><li>逐层进行访问，在同一层中，按从左到右的方式进行访问。</li></ol><p>遍历的结果为:A-B-C-D-E-F-G-H-J-I</p><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><ol><li>访问根结点;</li><li>先序遍历左子树;</li><li>先序遍历右子树。<blockquote><blockquote><blockquote><p>Tips: 先访问根节点，先左子树后右子树，先父层后子层，先左节点后右节点</p></blockquote></blockquote></blockquote></li></ol><p>遍历的结果为：A-B-D-G-H-I-C-E-F-J</p><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><ol><li>中序遍历左子树;</li><li>访问根结点;</li><li>中序遍历右子树。<blockquote><blockquote><blockquote><p>Tips: 先访问左子树，再访问根节点，再访问右子树</p></blockquote></blockquote></blockquote></li></ol><p>遍历结果为：</p><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><ol><li>后序遍历左子树;</li><li>中序遍历右子树;</li><li>访问根结点。<blockquote><blockquote><blockquote><p>Tips: 先访问左子树，再访问右子树,再访问根节点，</p></blockquote></blockquote></blockquote></li></ol><p>遍历结果为：</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;树Tree&lt;/strong&gt;是n(n&amp;gt;=0)个结点的有限集。n=0时称为空树。在任意一颗非空树中：&lt;br&gt;1）有且仅有一个特定的称为根（Root）的结点；&lt;br&gt;2）当n&amp;gt;1时，其余结点可分为m(m&amp;gt;0)个互不相交的有限集T1、T2、……、Tn，其中每一个集合本身又是一棵树，并且称为根的子树。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="sonake.github.io/tags/java/"/>
    
      <category term="数据结构" scheme="sonake.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="sonake.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>微服务配置中心动态刷新(SpringConfig)</title>
    <link href="sonake.github.io/2019/11/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0-SpringConfig/"/>
    <id>sonake.github.io/2019/11/26/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0-SpringConfig/</id>
    <published>2019-11-26T10:30:33.000Z</published>
    <updated>2021-10-26T01:54:52.364Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;


      
    
    </summary>
    
    
    
      <category term="SpringCloud" scheme="sonake.github.io/tags/SpringCloud/"/>
    
      <category term="微服务" scheme="sonake.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="java" scheme="sonake.github.io/tags/java/"/>
    
      <category term="SpringConfig" scheme="sonake.github.io/tags/SpringConfig/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法(二)</title>
    <link href="sonake.github.io/2019/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E4%BA%8C/"/>
    <id>sonake.github.io/2019/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E4%BA%8C/</id>
    <published>2019-11-21T15:17:27.000Z</published>
    <updated>2021-10-26T01:54:52.364Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要说一下常见的一些排序算法</p><a id="more"></a><h2 id="先来最简单的冒泡排序"><a href="#先来最简单的冒泡排序" class="headerlink" title="先来最简单的冒泡排序"></a>先来最简单的冒泡排序</h2><p>   直接上代码，时间复杂度O(n^2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr==<span class="keyword">null</span>||arr.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//每轮比较的元素下标</span></span><br><span class="line">            <span class="keyword">int</span> index = i;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="comment">//找出最小元素的下标</span></span><br><span class="line">            <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[index]&lt;arr[j])&#123;</span><br><span class="line">                    index = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[index];</span><br><span class="line">            arr[index] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span></span>{    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] arr){        <span class="keyword">return</span> <span class="keyword">null</span>;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里主要说一下常见的一些排序算法&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="sonake.github.io/tags/java/"/>
    
      <category term="数据结构" scheme="sonake.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="sonake.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="sonake.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法(一)</title>
    <link href="sonake.github.io/2019/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E4%B8%80/"/>
    <id>sonake.github.io/2019/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E4%B8%80/</id>
    <published>2019-11-21T10:21:08.000Z</published>
    <updated>2021-10-26T01:54:52.364Z</updated>
    
    <content type="html"><![CDATA[<p>数组的定义或者常见的操作比较简单，就不在描述了,说说下面这个<br><font color=#5F9EA0 size=4>大”O”表示法</font></p><a id="more"></a><h2 id="无序数组的插入耗时-常数"><a href="#无序数组的插入耗时-常数" class="headerlink" title="无序数组的插入耗时:常数"></a>无序数组的插入耗时:常数</h2><p>   无序数组的插入是目前为止可以接触到的算法中唯一一个耗时与数组的大小无关的<br>   定义这个耗时为常量K<br>   即T = K;<br>   实际使用中，这个数值可能受到软硬件的因素比较多，例如计算器的计算能力、运行速度、编译器的程序编译速度等等，可能需要多次<br>   测量我们才可以得到当前环境下的这个常量数值。</p><h2 id="线性查找：与数据项个数K成正比"><a href="#线性查找：与数据项个数K成正比" class="headerlink" title="线性查找：与数据项个数K成正比"></a>线性查找：与数据项个数K成正比</h2><p>   线性查找中, 寻找特定项所需的比较次数平均为数据项总数的一半。设N为数据项总数，搜索时间应该是跟数据项的一半成正比，<br>   即有下面的公式:<br>    T = K*N/2<br>   将1/2并入K值，得到：<br>    T=KN<br>   即线性查找的时间与数据项个数成正比。</p><h2 id="二分查找：-与log-N-成正比"><a href="#二分查找：-与log-N-成正比" class="headerlink" title="二分查找： 与log(N)成正比"></a>二分查找： 与log(N)成正比</h2><p>   T = K<em>log2(N)<br>   常量简化：<br>   T = K</em>logN   </p><h2 id="不要常数"><a href="#不要常数" class="headerlink" title="不要常数"></a>不要常数</h2><p>   大”O”表示法忽略常数，只关注数据项个数这个变量</p><h2 id="用大”O”表示法展示运行时间"><a href="#用大”O”表示法展示运行时间" class="headerlink" title="用大”O”表示法展示运行时间"></a>用大”O”表示法展示运行时间</h2><table><thead><tr><th>算法</th><th align="center">大O表示法运行时间</th></tr></thead><tbody><tr><td>线性查找</td><td align="center">O(N)</td></tr><tr><td>二分查找</td><td align="center">O(logn)</td></tr><tr><td>无序数组的插入</td><td align="center">O(1)</td></tr><tr><td>有序数组的插入</td><td align="center">O(N)</td></tr><tr><td>无序数组的删除</td><td align="center">O(N)</td></tr><tr><td>有序数组的删除</td><td align="center">O(N)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组的定义或者常见的操作比较简单，就不在描述了,说说下面这个&lt;br&gt;&lt;font color=#5F9EA0 size=4&gt;大”O”表示法&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="sonake.github.io/tags/java/"/>
    
      <category term="数据结构" scheme="sonake.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Redis分布式锁</title>
    <link href="sonake.github.io/2019/11/13/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>sonake.github.io/2019/11/13/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2019-11-13T14:17:03.000Z</published>
    <updated>2021-10-26T01:54:52.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式锁一般常见的有三种实现方式"><a href="#分布式锁一般常见的有三种实现方式" class="headerlink" title="分布式锁一般常见的有三种实现方式:"></a>分布式锁一般常见的有三种实现方式:</h2><ol><li>基于数据库的乐观锁;</li><li>基于Redis的分布式锁;</li><li>基于ZooKeeper的分布式锁;<br>这篇文章着重说一下基于redis的这种实现方式</li></ol><a id="more"></a><h2 id="为了保证分布式锁的可用性-需要至少保证锁的实现同时满足以下四个条件"><a href="#为了保证分布式锁的可用性-需要至少保证锁的实现同时满足以下四个条件" class="headerlink" title="为了保证分布式锁的可用性,需要至少保证锁的实现同时满足以下四个条件"></a>为了保证分布式锁的可用性,需要至少保证锁的实现同时满足以下四个条件</h2><p>–互斥性:在任何时刻,只能有一个客户端拥有锁<br>–不能发生死锁:即有一个客户端在持有锁的期间崩溃而没有主动解锁,也能保证后续其他客户端能加锁<br>–具有容错性:只要大部分的Redis节点正常运行,客户端就可以加锁和解锁<br>–正确性:解铃还须系铃人,加锁和解锁必须是同一个客户端,客户端自己不能把别人加的锁给解了,加锁解锁对应同一个客户端</p><h2 id="java代码实现"><a href="#java代码实现" class="headerlink" title="java代码实现"></a>java代码实现</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现加锁"><a href="#实现加锁" class="headerlink" title="实现加锁"></a>实现加锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCCESS = <span class="string">"OK"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">"NX"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">"PX"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis Redis客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 超期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否获取成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryGetDistributedLock</span><span class="params">(Jedis jedis, String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">        String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line">        <span class="keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们加锁就一行代码：</p><p>jedis.set(String key, String value, String nxxx, String expx, int time)</p><p>这个set()方法一共有五个形参：</p><p>第一个为key，我们使用key来当锁，因为key是唯一的。</p><p>第二个为value，我们传的是requestId，很多童鞋可能不明白，有key作为锁不就够了吗，为什么还要用到value？</p><p>原因就是我们在上面讲到可靠性时，分布式锁要满足第四个条件解铃还须系铃人，通过给value赋值为requestId，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。</p><p>requestId可以使用UUID.randomUUID().toString()方法生成。</p><p>第三个为nxxx，这个参数我们填的是NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；</p><p>第四个为expx，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。</p><p>第五个为time，与第四个参数相呼应，代表key的过期时间。</p><p>总的来说，执行上面的set()方法就只会导致两种结果：</p><p>当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有效期，同时value表示加锁的客户端。<br>已有锁存在，不做任何操作。<br>心细的童鞋就会发现了，我们的加锁代码满足我们可靠性里描述的三个条件。</p><p>首先，set()加入了NX参数，可以保证如果已有key存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足互斥性。</p><p>其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即key被删除），不会发生死锁。</p><p>最后，因为我们将value赋值为requestId，代表加锁的客户端请求标识，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。</p><p>由于我们只考虑Redis单机部署的场景，所以容错性我们暂不考虑。</p><h3 id="错误示例1"><a href="#错误示例1" class="headerlink" title="错误示例1"></a>错误示例1</h3><p>比较常见的错误示例就是使用jedis.setnx()和jedis.expire()组合实现加锁</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wrongGetLock1</span><span class="params">(Jedis jedis, String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123; </span><br><span class="line">        Long result = jedis.setnx(lockKey, requestId);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 若在这里程序突然崩溃，则无法设置过期时间，将发生死锁</span></span><br><span class="line">            jedis.expire(lockKey, expireTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setnx()方法作用就是SET IF NOT EXIST，expire()方法就是给锁加一个过期时间。</p><p>乍一看好像和前面的set()方法结果一样，然而由于这是两条Redis命令，不具有原子性，如果程序在执行完setnx()之后突然崩溃，导致锁没有设置过期时间。那么将会发生死锁。</p><p>网上之所以有人这样实现，是因为低版本的jedis并不支持多参数的set()方法。</p><h3 id="错误示例2"><a href="#错误示例2" class="headerlink" title="错误示例2"></a>错误示例2</h3><p>这一种错误示例就比较难以发现问题，而且实现也比较复杂。实现思路：使用jedis.setnx()命令实现加锁，其中key是锁，value是锁的过期时间。</p><p>执行过程：</p><p>1.通过setnx()方法尝试加锁，如果当前锁不存在，返回加锁成功。<br>2.如果锁已经存在则获取锁的过期时间，和当前时间比较，如果锁已经过期，则设置新的过期时间，返回加锁成功。<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">wrongGetLock2</span><span class="params">(Jedis jedis, String lockKey, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">long</span> expires = System.currentTimeMillis() + expireTime;</span><br><span class="line">        String expiresStr = String.valueOf(expires);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 如果当前锁不存在，返回加锁成功</span></span><br><span class="line">        <span class="keyword">if</span> (jedis.setnx(lockKey, expiresStr) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 如果锁存在，获取锁的过期时间</span></span><br><span class="line">        String currentValueStr = jedis.get(lockKey);</span><br><span class="line">        <span class="keyword">if</span> (currentValueStr != <span class="keyword">null</span> &amp;&amp; Long.parseLong(currentValueStr) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">            <span class="comment">// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间</span></span><br><span class="line">            String oldValueStr = jedis.getSet(lockKey, expiresStr);</span><br><span class="line">            <span class="keyword">if</span> (oldValueStr != <span class="keyword">null</span> &amp;&amp; oldValueStr.equals(currentValueStr)) &#123;</span><br><span class="line">                <span class="comment">// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才有权利加锁</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 其他情况，一律返回加锁失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这段代码问题在哪里？</p><ol><li><p>由于是客户端自己生成过期时间，所以需要强制要求分布式下每个客户端的时间必须同步。</p></li><li><p>当锁过期的时候，如果多个客户端同时执行jedis.getSet()方法，那么虽然最终只有一个客户端可以加锁，但这个客户端的锁过期时间可能被其他客户端覆盖。</p></li><li><p>锁不具备拥有者标识，即任何客户端都可以解锁。</p></li></ol><h2 id="解锁代码"><a href="#解锁代码" class="headerlink" title="解锁代码"></a>解锁代码</h2><h3 id="正确姿势"><a href="#正确姿势" class="headerlink" title="正确姿势"></a>正确姿势</h3><p>还是先展示代码，再带大家慢慢解释为什么这样实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis Redis客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否释放成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">releaseDistributedLock</span><span class="params">(Jedis jedis, String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String script = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line">        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (RELEASE_SUCCESS.equals(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们解锁只需要两行代码就搞定了！</p><p>第一行代码，我们写了一个简单的Lua脚本代码。</p><p>第二行代码，我们将Lua代码传到jedis.eval()方法里，并使参数KEYS[1]赋值为lockKey，ARGV[1]赋值为requestId。eval()方法是将Lua代码交给Redis服务端执行。</p><p>那么这段Lua代码的功能是什么呢？</p><p>其实很简单，首先获取锁对应的value值，检查是否与requestId相等，如果相等则删除锁（解锁）。</p><p>那么为什么要使用Lua语言来实现呢？</p><p>因为要确保上述操作是原子性的。关于非原子性会带来什么问题，可以阅读【解锁代码-错误示例2】</p><p>那么为什么执行eval()方法可以确保原子性，源于Redis的特性，下面是官网对eval命令的部分解释：</p><p>简单来说，就是在eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，并且直到eval命令执行完成，Redis才会执行其他命令。</p><h3 id="错误示例1-1"><a href="#错误示例1-1" class="headerlink" title="错误示例1"></a>错误示例1</h3><p>最常见的解锁代码就是直接使用jedis.del()方法删除锁，这种不先判断锁的拥有者而直接解锁的方式，会导致任何客户端都可以随时进行解锁，即使这把锁不是它的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTool</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wrongReleaseLock1</span><span class="params">(Jedis jedis, String lockKey)</span> </span>&#123;</span><br><span class="line">        jedis.del(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误示例2-1"><a href="#错误示例2-1" class="headerlink" title="错误示例2"></a>错误示例2</h3><p>这种解锁代码乍一看也是没问题，甚至我之前也差点这样实现，与正确姿势差不多，唯一区别的是分成两条命令去执行</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTool</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> requestId</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wrongReleaseLock2</span><span class="params">(Jedis jedis, String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 判断加锁与解锁是不是同一个客户端</span></span><br><span class="line">        <span class="keyword">if</span> (requestId.equals(jedis.get(lockKey))) &#123;</span><br><span class="line">            <span class="comment">// 若在此时，这把锁突然不是这个客户端的，则会误解锁</span></span><br><span class="line">            jedis.del(lockKey);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如代码注释，问题在于如果调用jedis.del()方法的时候，这把锁已经不属于当前客户端的时候会解除他人加的锁。</p><p>那么是否真的有这种场景？</p><p>答案是肯定的，比如客户端A加锁，一段时间之后客户端A解锁，在执行jedis.del()之前，锁突然过期了，此时客户端B尝试加锁成功，然后客户端A再执行del()方法，则将客户端B的锁给解除了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了如何使用Java代码正确实现Redis分布式锁，对于加锁和解锁也分别给出了两个比较经典的错误示例。</p><p>其实想要通过Redis实现分布式锁并不难，只要保证能满足可靠性里的四个条件。</p><p>互联网虽然给我们带来了方便，只要有问题就可以google，然而网上的答案一定是对的吗？其实不然，所以我们更应该时刻保持着质疑精神，多想多验证。</p><p>如果你的项目中Redis是多机部署的，那么可以尝试使用Redisson实现分布式锁，这是Redis官方提供的Java组件，链接在参考阅读章节已经给出</p><h1 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h1><p><a href="https://redis.io/topics/distlock" target="_blank" rel="noopener">https://redis.io/topics/distlock</a><br><a href="https://redis.io/commands/eval" target="_blank" rel="noopener">https://redis.io/commands/eval</a><br><a href="https://github.com/redisson/redisson" target="_blank" rel="noopener">https://github.com/redisson/redisson</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分布式锁一般常见的有三种实现方式&quot;&gt;&lt;a href=&quot;#分布式锁一般常见的有三种实现方式&quot; class=&quot;headerlink&quot; title=&quot;分布式锁一般常见的有三种实现方式:&quot;&gt;&lt;/a&gt;分布式锁一般常见的有三种实现方式:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;基于数据库的乐观锁;&lt;/li&gt;
&lt;li&gt;基于Redis的分布式锁;&lt;/li&gt;
&lt;li&gt;基于ZooKeeper的分布式锁;&lt;br&gt;这篇文章着重说一下基于redis的这种实现方式&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="sonake.github.io/tags/java/"/>
    
      <category term="redis" scheme="sonake.github.io/tags/redis/"/>
    
      <category term="分布式锁" scheme="sonake.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>记录一些mysql的笔记</title>
    <link href="sonake.github.io/2019/11/13/mysql%E7%AC%94%E8%AE%B0/"/>
    <id>sonake.github.io/2019/11/13/mysql%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-13T10:56:37.000Z</published>
    <updated>2021-10-26T01:54:52.360Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql服务端与客户端常见的连接方式有三种："><a href="#mysql服务端与客户端常见的连接方式有三种：" class="headerlink" title="mysql服务端与客户端常见的连接方式有三种："></a>mysql服务端与客户端常见的连接方式有三种：</h3><p>1.TCP/IP连接,这是我们目前经常采用的方式<br>2.命名管道和共享内存</p><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="命名管道和共享内存.png" alt="命名管道和共享内存.png" title="">                </div>                <div class="image-caption">命名管道和共享内存.png</div>            </figure><p>3.Unix域套接字文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Unix域套接字文件.png" alt="Unix域套接字文件.png" title="">                </div>                <div class="image-caption">Unix域套接字文件.png</div>            </figure><h2 id="mysql的启动连接有长短命令，最初是长命令，为了方便改为短命令"><a href="#mysql的启动连接有长短命令，最初是长命令，为了方便改为短命令" class="headerlink" title="mysql的启动连接有长短命令，最初是长命令，为了方便改为短命令"></a>mysql的启动连接有长短命令，最初是长命令，为了方便改为短命令</h2><h3 id="常见长短命令的对应关系"><a href="#常见长短命令的对应关系" class="headerlink" title="常见长短命令的对应关系"></a>常见长短命令的对应关系</h3><table><thead><tr><th>参数名</th><th align="center">含义</th></tr></thead><tbody><tr><td>-h</td><td align="center">表示服务器进程所在计算机的域名或者IP地址，如果服务器进程就运行在本机的话，可以省略这个参数，或者填localhost或者127.0.0.1。也可以写作 –host=主机名的形式</td></tr><tr><td>-u</td><td align="center">表示用户名。也可以写作 –user=用户名的形式</td></tr><tr><td>-p</td><td align="center">表示密码。也可以写作 –password=密码的形式</td></tr><tr><td>-P</td><td align="center">表示端口，也可以写作–port端口</td></tr><tr><td>-V</td><td align="center">表示版本信息，也可以写作–version</td></tr></tbody></table><h2 id="mysql的命令参数优先级"><a href="#mysql的命令参数优先级" class="headerlink" title="mysql的命令参数优先级"></a>mysql的命令参数优先级</h2><p>不同文件的相同参数<br>   <font color=#5F9EA0 size=4>命令行指定参数&gt;my.cnf&gt;其他配置文件</font><br>同文件的相同参数<br>   <font color=#5F9EA0 size=4>以出现在最后的位置为准</font><br> <font color=#5F9EA0 size=4>defaults-extra-file</font>参数可以指定额外的配置文件搜索路径   </p><h2 id="mysql索引的存储方式"><a href="#mysql索引的存储方式" class="headerlink" title="mysql索引的存储方式"></a>mysql索引的存储方式</h2><p>   mysql索引采用的存储方式为B+树</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mysql服务端与客户端常见的连接方式有三种：&quot;&gt;&lt;a href=&quot;#mysql服务端与客户端常见的连接方式有三种：&quot; class=&quot;headerlink&quot; title=&quot;mysql服务端与客户端常见的连接方式有三种：&quot;&gt;&lt;/a&gt;mysql服务端与客户端常见的连接方式有三种：&lt;/h3&gt;&lt;p&gt;1.TCP/IP连接,这是我们目前经常采用的方式&lt;br&gt;2.命名管道和共享内存&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="sonake.github.io/tags/mysql/"/>
    
      <category term="sql进阶" scheme="sonake.github.io/tags/sql%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>讨论下时下很热门的容器部署,先来安装docker</title>
    <link href="sonake.github.io/2019/10/20/centos7%E4%B8%8A%E9%9D%A2docker%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>sonake.github.io/2019/10/20/centos7%E4%B8%8A%E9%9D%A2docker%E7%9A%84%E5%AE%89%E8%A3%85/</id>
    <published>2019-10-20T10:56:37.000Z</published>
    <updated>2021-10-26T01:54:52.360Z</updated>
    
    <content type="html"><![CDATA[<p>如果没有服务器的同学可以自助机安装一个虚拟机<br>我这里是在自己的电脑上安装的虚拟机，系统版本是<br>centos Linux release 7.6.1810(Core)<br>为了避免一些其他错误，请切换至根用户下操作</p><a id="more"></a><p>第一步：<br>    卸载已安装的docker：yum remove docker-*<br>第二步：<br>    更新系统内核：yum update<br>第三步：<br>    安装docker：yum install docker<br>第四步：<br>    启动docker：systemctl start docker<br>第五步：<br>    查看容器：docker ps<br>第六步：<br>    添加阿里云的镜像加速地址：vim /etc/docker/daemon.json<br>    添加内容：{“registry-mirrors”: <a href=""https://aiyf7r3a.mirror.aliyuncs.com"">“https://aiyf7r3a.mirror.aliyuncs.com”</a>}<br>第七步：<br>    重启docker：systemctl restart docker</p><p>至此docker安装完毕！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果没有服务器的同学可以自助机安装一个虚拟机&lt;br&gt;我这里是在自己的电脑上安装的虚拟机，系统版本是&lt;br&gt;centos Linux release 7.6.1810(Core)&lt;br&gt;为了避免一些其他错误，请切换至根用户下操作&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="sonake.github.io/tags/docker/"/>
    
      <category term="centos" scheme="sonake.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="sonake.github.io/2019/10/18/hello-world/"/>
    <id>sonake.github.io/2019/10/18/hello-world/</id>
    <published>2019-10-18T10:21:08.000Z</published>
    <updated>2021-10-26T01:54:52.360Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
